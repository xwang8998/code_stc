C51 COMPILER V9.51   MAIN                                                                  04/10/2020 14:00:55 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\OBJ\main.obj
COMPILER INVOKED BY: d:\Keil_v5\C51\BIN\C51.EXE main.c BROWSE INCDIR(..\SMEC98SPfor8051_accu;.\SMEC98SP\Header;.\fpga_i2
                    -c;.\moni_I2C_A) DEBUG OBJECTEXTEND PRINT(.\LST\main.lst) OBJECT(.\OBJ\main.obj)

line level    source

   1          #include <STC15F2K60S2.H>
   2          #include "string.h"
   3          #include <stdlib.h>
   4          #include <SMEC98SP.h>
   5          #include <iic_smec98sp.h>
   6          //#include "my.h"
   7          #include        "moni_I2C_A.h"
   8          #include<stdio.h>
   9          
  10          #define FPGA_ADDR       0xA0
  11          #define HIGH    1
  12          #define LOW             0
  13          #define IIC_NOACK 1
  14          #define IIC_ACK 0
  15          #define IIC_DELAYTIME 5                 //IIC通讯速率大约100K
  16          #define IIC_ADDR        0x00                    //对应SMEC98SP中地址
  17          #define ACKCHECKTIME 600
  18          #define BAUD  0xFEC8  
  19          
  20          #define CMD_WRITE_MEM            0x96
  21          #define CMD_WRITE_MEM_EX         0x97
  22          #define CMD_READ_MEM             0x44
  23          #define CMD_READ_STATUS              0xAA 
  24          #define CMD_SET_PAGE_PROT        0xC3 
  25          #define CMD_DECREMENT_CNT        0xC9 
  26          #define CMD_READ_RNG             0xD2 
  27          #define CMD_ENC_READ_MEM         0x4B 
  28          #define CMD_COMP_READ_AUTH       0xA5
  29          #define CMD_ENH_CRPA             0x5A
  30          #define CMD_AUTH_SHA3_WRITE      0x99 
  31          #define CMD_AUTH_SHA3_WRITE_EX   0x9A 
  32          #define CMD_COMP_LOCK_SHA3       0x3C 
  33          #define CMD_DISABLE_DEVICE       0x33
  34          #define CMD_AUTH_REFRESH_PG      0xA3
  35          
  36          
  37          typedef bit BOOL;
  38          typedef unsigned char BYTE;
  39          typedef unsigned int WORD;
  40          
  41          BYTE TBUF,RBUF;
  42          BYTE TDAT,RDAT;
  43          BYTE TCNT,RCNT;
  44          BYTE TBIT,RBIT;
  45          BOOL TING,RING;
  46          BOOL TEND,REND;
  47          
  48          #define STACK_MAX  16
  49          
  50          //unsigned char gi, gj,gk,gm,gn,gret,gfail; //changed linsd //xdata
  51          //unsigned char gi, gj,gk,gm,gn,gret,gfail,; //changed linsd //xdata
  52           //unsigned char code InternalKey[16] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,
             -0x0D,0x0E,0x0F};//内部认证密钥,必须和SMEC98SP一致
  53          // unsigned char buf[20];
C51 COMPILER V9.51   MAIN                                                                  04/10/2020 14:00:55 PAGE 2   

  54          
  55          
  56          
  57          /******************************************************************************************
  58          /*延时us函数22.1184M  1T
  59          /******************************************************************************************/
  60          
  61                           //38400bps @ 11.0592MHz
  62          sbit    IO_INOUT    =P3^4;                      //定义IIC inout管脚，
  63          sbit    IIC_SCL     =P2^2;                      //定义IIC SCL管脚
  64          sbit    IIC_SDA     =P2^2;                      //定义IIC SCL管脚
  65          sbit    OW     =P3^3;                   //定义IIC SDA管脚，
  66          sbit    EN     =P3^5;                   //定义IIC en管脚，
  67          sbit            RXB = P3^0;                        //define UART TX/RX port
  68          sbit            TXB = P3^1;
  69          
  70          
  71          
  72          
  73          void IIC_Delayus(unsigned int n);
  74          void UART_SEND(BYTE dat);
  75          extern unsigned char i2c_single_byte_read(unsigned char xdevaddr,unsigned char RdAddr);
  76          extern void  i2c_single_byte_write(unsigned char xdevaddr,unsigned char xbyte_addr,unsigned char xbyte_dat
             -a);
  77          
  78          void StartUART( void );
  79          void Starttimer0(void);
  80          void delay_nms(unsigned int i);
  81          void print_string(char *str);
  82          void PrintHex(unsigned char *str,unsigned int len);
  83          void UART_INIT();
  84          
  85          //BYTE t, r;
  86          BYTE buf[70] ={0};
  87          // BYTE idata buf[39] ={0};
  88          // BYTE idata buf[39] ={0};
  89          
  90           uchar code PG0_data[32] =         { 0xBC,0xAE,0x45,0xDE,0x69,0xAF,0x83,0x34,0xD2,0x63,0x60,0x69,0x4E,0x38,0x4
             -E,0xA7,0x54,0xD0,0x1D,0x2A,0x7D,0xF3,0x96,0x3E,0x75,0x98,0xB0,0xBA,0x1B,0xBD,0xFC,0xE0 };//32  PG0
  91           //uchar code PG0_data[32] =     { 0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0
             -x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11 };
  92           uchar code PG6_data[32] =     { 0x2A,0xAE,0x45,0xDE,0x69,0x5B,0x83,0x34,0xD2,0x63,0x60,0x69,0x4E,0x38,0x4
             -E,0x97,0x54,0xD0,0x1D,0x2A,0x7D,0xF3,0x96,0x3E,0x75,0x98,0xB0,0xBA,0x1B,0xBD,0xFC,0xE0 };//32 PG6
  93           uchar code hmac_secret[32] =  { 0x11,0xEE,0xAA,0xBB,0x22,0x55,0x88,0x33,0xDD,0x66,0x60,0x99,0x44,0x33,0x4
             -4,0x99,0x55,0xDD,0x1D,0x22,0x77,0xFF,0x99,0x33,0x77,0x99,0xBB,0xBB,0x11,0xBB,0xFF,0xEE };//32
  94           uchar code ROM_NO[8] =  { 0x05,0xAF,0x61,0x38,0x00,0x00,0x00,0x39 };//32
  95           uchar code MANID[2] =  { 0x00,0x00 };//32
  96          //-----------------------------------------
  97          //Timer interrupt routine for UART
  98          
  99          void tm0() interrupt 1 using 1
 100          {
 101   1              
 102   1          if (RING)
 103   1          {
 104   2              if (--RCNT == 0)
 105   2              {
 106   3                  RCNT = 3;                   //reset send baudrate counter
 107   3                  if (--RBIT == 0)
 108   3                  {
 109   4                      RBUF = RDAT;            //save the data to RBUF
 110   4                      RING = 0;               //stop receive
C51 COMPILER V9.51   MAIN                                                                  04/10/2020 14:00:55 PAGE 3   

 111   4                      REND = 1;               //set receive completed flag
 112   4                  }
 113   3                  else
 114   3                  {
 115   4                      RDAT >>= 1;
 116   4                      if (RXB) RDAT |= 0x80;  //shift RX data to RX buffer
 117   4                  }
 118   3              }
 119   2          }
 120   1          else if (!RXB)
 121   1          {
 122   2              RING = 1;                       //set start receive flag
 123   2              RCNT = 4;                       //initial receive baudrate counter
 124   2              RBIT = 9;                       //initial receive bit number (8 data bits + 1 stop bit)
 125   2          }
 126   1      
 127   1          if (--TCNT == 0)
 128   1          {
 129   2              TCNT = 3;                       //reset send baudrate counter
 130   2              if (TING)                       //judge whether sending
 131   2              {
 132   3                  if (TBIT == 0)
 133   3                  {
 134   4                      TXB = 0;                //send start bit
 135   4                      TDAT = TBUF;            //load data from TBUF to TDAT
 136   4                      TBIT = 9;               //initial send bit number (8 data bits + 1 stop bit)
 137   4                  }
 138   3                  else
 139   3                  {
 140   4                      TDAT >>= 1;             //shift data to CY
 141   4                      if (--TBIT == 0)
 142   4                      {
 143   5                          TXB = 1;
 144   5                          TING = 0;           //stop send
 145   5                          TEND = 1;           //set send completed flag
 146   5                      }
 147   4                      else
 148   4                      {
 149   5                          TXB = CY;           //write CY to TX port
 150   5                      }
 151   4                  }
 152   3              }
 153   2          }
 154   1      }
 155          
 156          //-----------------------------------------
 157          //initial UART module variable
 158          
 159          void UART_INIT()
 160          {
 161   1          TING = 0;
 162   1          RING = 0;
 163   1          TEND = 1;
 164   1          REND = 0;
 165   1          TCNT = 0;
 166   1          RCNT = 0;
 167   1      }
 168          void UART_SEND(BYTE dat)
 169          {
 170   1          while (!TEND);
 171   1          TEND = 0;
 172   1          TBUF = dat;
C51 COMPILER V9.51   MAIN                                                                  04/10/2020 14:00:55 PAGE 4   

 173   1          TING = 1;
 174   1      }
 175          /*
 176          void UART_HEX(unsigned char *buf, unsigned char len)
 177          {
 178                  unsigned int i;
 179              for(i=0;i<len;i++)
 180                          {
 181                                  UART_SEND(buf[i]);
 182                          }
 183          }
 184          
 185          void IIC_Delayus(unsigned int n)
 186          {
 187                  //unsigned char i;
 188                  for(;n>0;n--)
 189                  {
 190                          ;//i = 1;
 191                  }       
 192          }
 193          void    IIC_SetSDA(unsigned char level)
 194          {
 195                  if(level == HIGH)
 196                  {
 197                          IIC_SDA = 1;
 198                  }else
 199                  {
 200                          IIC_SDA = 0;
 201                  }
 202          }
 203          void    IIC_SetSCL(unsigned char level)
 204          {
 205                  if(level == HIGH)
 206                  {
 207                          IIC_SCL = 1;
 208                  }else
 209                  {
 210                          IIC_SCL = 0;
 211                  }
 212          }
 213          void SetSDAto_InputMode(void)
 214          {
 215                  //根据芯片手册配置
 216                  IIC_SDA = 1;                    //设为输入
 217                  IO_INOUT = 0;
 218                  
 219          }
 220          void SetSDAto_OutputMode(void)
 221          {
 222                  //根据芯片手册配置
 223                  //本单片机不用设置可直接输出
 224                  IO_INOUT = 1;
 225                  
 226          }
 227          
 228          void   IIC_Start(void)
 229          {
 230                  SetSDAto_OutputMode();                  //SDA设为输出模式
 231                  IIC_SetSDA(HIGH);
 232                  IIC_SetSCL(HIGH);
 233                  IIC_Delayus(IIC_DELAYTIME);                     
 234                  IIC_SetSDA(LOW);
C51 COMPILER V9.51   MAIN                                                                  04/10/2020 14:00:55 PAGE 5   

 235                  IIC_Delayus(IIC_DELAYTIME);
 236                  IIC_SetSCL(LOW);
 237          }
 238          
 239          void   IIC_Stop(void)
 240          {       
 241                  SetSDAto_OutputMode();                  //SDA设为输出模式
 242                  IIC_SetSDA(LOW);
 243                  IIC_SetSCL(HIGH);
 244                  IIC_Delayus(IIC_DELAYTIME);
 245                  IIC_SetSDA(HIGH);
 246                  IIC_Delayus(IIC_DELAYTIME);
 247          }
 248          unsigned char IIC_GetSdaStus(void)
 249          {
 250                  unsigned char tmp;
 251          
 252                  if(IIC_SDA == 1)        
 253                          tmp=1;
 254                  else 
 255                          tmp=0;
 256                  return tmp;
 257          }
 258          
 259          
 260          unsigned char  IIC_Send(unsigned char IIC_data)
 261          {
 262                  unsigned char Ack ;
 263                  unsigned int AckLoop;
 264                  unsigned char xtmp;
 265                  unsigned char i;
 266                  SetSDAto_OutputMode();                  //SDA设为输出模式
 267              //xtmp = IIC_data;//50;
 268                  //while(1)
 269                  //{IIC_SDA = 1;
 270               //IIC_Delayus(8);
 271                   //IIC_SDA = 0;
 272               //IIC_Delayus(8);
 273                   //IIC_SDA = 0;
 274               //IIC_Delayus(8);
 275                  //}
 276              //while(1){
 277                  xtmp = IIC_data;//50;
 278                  for(i=0;i<8;i++)
 279                  {
 280                          IIC_SetSCL(LOW);
 281                          IIC_Delayus(IIC_DELAYTIME);
 282                          if((xtmp&0x80)==0)
 283                             IIC_SetSDA(0);
 284                          else
 285                             IIC_SetSDA(1);
 286                          IIC_Delayus(IIC_DELAYTIME);
 287                          IIC_SetSCL(HIGH);
 288                          IIC_Delayus(IIC_DELAYTIME);
 289                          IIC_Delayus(IIC_DELAYTIME);
 290                          xtmp<<= 1;
 291                  }
 292                  //IIC_Delayus(1000);
 293             //}
 294                  
 295                  IIC_SetSCL(LOW);
 296                  IIC_Delayus(IIC_DELAYTIME);
C51 COMPILER V9.51   MAIN                                                                  04/10/2020 14:00:55 PAGE 6   

 297                  IIC_Delayus(IIC_DELAYTIME);
 298              SetSDAto_InputMode();//SDA设为输入模式
 299                  IIC_SetSCL(HIGH);
 300                  IIC_Delayus(IIC_DELAYTIME);
 301                  IIC_Delayus(IIC_DELAYTIME);
 302                  Ack = IIC_NOACK;
 303                                          
 304                  for(AckLoop=0;AckLoop<ACKCHECKTIME;AckLoop++) //260us
 305                  {
 306                          if(!IIC_GetSdaStus())
 307                          {
 308                                  Ack = IIC_ACK;
 309                                  break;
 310                          }
 311                          IIC_Delayus(IIC_DELAYTIME);
 312                  }
 313                  IIC_SetSCL(LOW);
 314                  
 315                  
 316                  return Ack;                     //return success=0 / failure=1
 317          }
 318          
 319          unsigned char IIC_Read(unsigned char bACK)
 320          {
 321                  unsigned char Data;
 322                  unsigned char i;
 323                  Data = 0;
 324                  SetSDAto_InputMode();                   //SDA设为输入模式
 325                  for(i=0;i<8;i++)
 326                  {
 327                          Data <<= 1;
 328                          IIC_SetSCL(LOW);
 329                          IIC_Delayus(IIC_DELAYTIME);
 330                          IIC_Delayus(IIC_DELAYTIME);
 331                          IIC_Delayus(IIC_DELAYTIME);
 332                          IIC_SetSCL(HIGH);
 333                          IIC_Delayus(IIC_DELAYTIME);
 334                          IIC_Delayus(IIC_DELAYTIME);
 335                          if(IIC_GetSdaStus())
 336                                  Data |= 1;
 337                          else
 338                                  Data &= 0xfe;
 339                  }
 340                  IIC_SetSCL(LOW);
 341                  
 342                  IIC_Delayus(IIC_DELAYTIME);   
 343                  IIC_SetSDA(bACK);
 344                  IIC_Delayus(IIC_DELAYTIME);
 345              SetSDAto_OutputMode();                      //SDA设为输出模式       
 346                  IIC_SetSCL(HIGH);
 347                  IIC_Delayus(IIC_DELAYTIME);
 348                  IIC_Delayus(IIC_DELAYTIME);
 349                  IIC_SetSCL(LOW);
 350                  return Data;
 351          }
 352          
 353          
 354          bit IIC_ReadWithAddr(unsigned char addr, unsigned char *buf, unsigned char len)
 355          {
 356                  unsigned char i;
 357                  
 358                  
C51 COMPILER V9.51   MAIN                                                                  04/10/2020 14:00:55 PAGE 7   

 359                  i = 10;
 360              while (i) 
 361                  {
 362                          
 363                          IIC_Start();
 364                  if (IIC_Send(addr) == IIC_ACK) break;
 365                  if (--i == 0) return IIC_NOACK;
 366              }
 367                  for(i = 0; i < len -1 ; i++)
 368                  {
 369                          buf[i] = IIC_Read(IIC_ACK);
 370                  }
 371                  buf[i] = IIC_Read(IIC_NOACK);
 372                  IIC_Stop();
 373          
 374                  return IIC_ACK;
 375          }
 376          
 377          bit IIC_WriteWithAddr(unsigned char addr, unsigned char *buf, unsigned char len)
 378          {
 379                  unsigned char i,xaddr,get_ret;
 380                  i = 10;
 381                  xaddr = addr;//0x50;
 382                  
 383              while (i>0) //for(i = 0; i < 10; i++)//
 384                  {
 385                          //IIC_Send(xaddr);
 386                          
 387                          IIC_Start();
 388                          get_ret = IIC_Send(xaddr);
 389                          if(get_ret==IIC_ACK){break;}
 390                  if (IIC_Send(xaddr) == IIC_ACK) break;
 391                          i--;
 392                  if (i >= 10){
 393                                  return IIC_NOACK;}
 394              }
 395                  for(i = 0; i < len; i++)
 396                  {
 397                          
 398                          get_ret = IIC_Send(buf[i]);
 399                          if(get_ret!=0)
 400                                  return IIC_NOACK;
 401                  }
 402              
 403                  IIC_Delayus(IIC_DELAYTIME);
 404                  IIC_Delayus(IIC_DELAYTIME);
 405                  
 406                  IIC_Stop();
 407              
 408                  
 409                  
 410                  return IIC_ACK;
 411          }
 412          */
 413          //----------------------------------------------------------------------------------------
 414          //22.1184M  1T   
 415          // void delay_nms(unsigned int i)
 416          // {
 417          //      unsigned int  j;        
 418          //      
 419          //      for(;i>0;i--)
 420          //      {
C51 COMPILER V9.51   MAIN                                                                  04/10/2020 14:00:55 PAGE 8   

 421          //              OW =1;
 422          //              j = 1580;
 423          
 424          //              while(--j);     
 425          //                      
 426          //      }
 427          // }
 428          
 429          void delay_nms(unsigned int i)
 430          {
 431   1              unsigned int  j;        
 432   1              
 433   1              for(;i>0;i--)
 434   1              {
 435   2                      
 436   2                      
 437   2      
 438   2                      for(j = 1580;j>0;j--)   
 439   2                              {
 440   3                                      OW =1;
 441   3                              }
 442   2                              
 443   2              }
 444   1      }
 445          void sd_delay(unsigned char x)
 446          {
 447   1              unsigned char  i;
 448   1              i = x;
 449   1              while(--i);
 450   1      }
 451          
 452          
 453          //-----------------------------------------
 454          void ow_read_page(unsigned char len,unsigned char page )//66 02 44 07 [32][75] AA 
 455          {
 456   1              unsigned char  i;
 457   1              unsigned char getreset_ok;
 458   1              delay_us(1000);
 459   1                      getreset_ok = ow_reset();delay_us(500);
 460   1                      if(getreset_ok)
 461   1                      {
 462   2                      getreset_ok = 0;
 463   2                      ow_write_byte(0xCC);
 464   2                      delay_us(100);
 465   2                      ow_write_byte(0x66);
 466   2                      ow_write_byte(len);
 467   2                      ow_write_byte(CMD_READ_MEM);
 468   2                      ow_write_byte(page);
 469   2                      delay_us(100);
 470   2                      buf[0] = ow_read_byte();//crc
 471   2                      buf[1] = ow_read_byte();//crc
 472   2                      //UART_SEND(buf[0]);UART_SEND(buf[1]);
 473   2                      delay_us(100);
 474   2                      ow_write_byte(0xAA);
 475   2                      //P3M1 = 0x20;
 476   2                      //P3M0 = 0x00;
 477   2                      delay_nms(50);
 478   2                      
 479   2                      
 480   2                      for(i=2;i<39;i++)
 481   2                              {
 482   3                                      buf[i] = ow_read_byte();
C51 COMPILER V9.51   MAIN                                                                  04/10/2020 14:00:55 PAGE 9   

 483   3                                      UART_SEND(buf[i]);
 484   3                                      delay_us(100);
 485   3                              }
 486   2                      }
 487   1                      else ;
 488   1                      delay_us(1000);
 489   1      
 490   1      }
 491          void ow_write_page(unsigned char len,unsigned char page,uchar *write_data )//66 22 96 06 2A AE 45 DE 69 5B
             - 83 34 D2 63 60 69 4E 38 4E 97 54 D0 1D 2A 7D F3 96 3E 75 98 B0 BA 1B BD FC E0 [FC][67] AA 
 492          {
 493   1              int  i,j;
 494   1              unsigned char getreset_ok;
 495   1              //uchar buf[39];
 496   1              delay_us(1000);
 497   1      ///////////////////////////////////////
 498   1                              memcpy(&buf[0],write_data,32);
 499   1                              delay_us(100);
 500   1      
 501   1                      getreset_ok = ow_reset();delay_us(500);
 502   1                      if(getreset_ok)
 503   1                      {
 504   2                      getreset_ok = 0;
 505   2                      ow_write_byte(0xCC);
 506   2                      delay_us(100);
 507   2                      ow_write_byte(0x66);
 508   2                      ow_write_byte(len);
 509   2                      ow_write_byte(CMD_WRITE_MEM);
 510   2                      ow_write_byte(page);
 511   2                      delay_us(100);
 512   2                      //memcpy(&buf[0],write_data,32);
 513   2                      
 514   2                      for(i=0;i<=31;i++)
 515   2                              {
 516   3                                      ow_write_byte(  buf[i]);
 517   3                                      //UART_SEND(buf[i]);
 518   3                                      delay_us(100);
 519   3                              }
 520   2                      
 521   2                      buf[32] = ow_read_byte();
 522   2                      buf[33] = ow_read_byte();
 523   2                      //UART_SEND(buf[0]);UART_SEND(buf[1]);
 524   2                      delay_us(100);
 525   2                      ow_write_byte(0xAA);
 526   2                      delay_us(100);delay_us(100);delay_us(100);delay_us(100);
 527   2                      
 528   2                      delay_nms(100);
 529   2                      //delay_us(60000);
 530   2                      for(j=0;j<5;j++)
 531   2                      {
 532   3                              buf[34+j] = ow_read_byte();
 533   3                              delay_us(100);
 534   3                      }
 535   2                      
 536   2                      
 537   2                      }
 538   1                      else ;
 539   1                      delay_us(1000);
 540   1      
 541   1      }
 542          void ow_write_crpa(unsigned char page,uchar at,uchar *challenge )
 543          {
C51 COMPILER V9.51   MAIN                                                                  04/10/2020 14:00:55 PAGE 10  

 544   1              int  i,j;
 545   1              unsigned char getreset_ok;
 546   1              delay_us(1000);
 547   1              memcpy(&buf[0],challenge,32);
 548   1                      getreset_ok = ow_reset();delay_us(500);
 549   1                      if(getreset_ok)
 550   1                      {
 551   2                      getreset_ok = 0;
 552   2                      ow_write_byte(0xCC);
 553   2                      delay_us(100);
 554   2                      ow_write_byte(0x66);
 555   2                      ow_write_byte(0x23);
 556   2                      ow_write_byte(0xa5);
 557   2                      ow_write_byte(page);
 558   2                      ow_write_byte(at);
 559   2                      delay_us(100);
 560   2                      for(i=0;i<=31;i++)
 561   2                              {
 562   3                                      ow_write_byte(buf[i]);
 563   3                                      UART_SEND(buf[i]);
 564   3                                      delay_us(100);
 565   3                              }
 566   2                      
 567   2                      buf[32] = ow_read_byte();
 568   2                      buf[33] = ow_read_byte();
 569   2                      //UART_SEND(buf[0]);UART_SEND(buf[1]);
 570   2                      delay_us(100);
 571   2                      ow_write_byte(0xAA);
 572   2                      //P3M1 = 0x20;
 573   2                      //P3M0 = 0x00;
 574   2                      delay_nms(50);
 575   2                      
 576   2                      for(j=0;j<37;j++)
 577   2                      {
 578   3                              buf[j] = ow_read_byte();
 579   3                              UART_SEND(buf[j]);
 580   3                              delay_us(100);
 581   3                      }
 582   2                      
 583   2                      }
 584   1                      else ;
 585   1                      delay_us(1000);
 586   1      
 587   1      }
 588          void ow_write_sha3_256(uchar len,uchar *message)
 589          {
 590   1              
 591   1      }
*** WARNING C280 IN LINE 588 OF main.c: 'len': unreferenced local variable
*** WARNING C280 IN LINE 588 OF main.c: 'message': unreferenced local variable
 592          
 593          //////////////////////////////////////////////////////////////////////
 594          void main(void)
 595          {
 596   1              unsigned char  ret,i,flag;
 597   1              unsigned char  k,j;
 598   1              unsigned char getreset_ok;
 599   1              TMOD = 0xf0;                        //timer0 in 16-bit auto reload mode
 600   1          AUXR = 0x80;                        //timer0 working at 1T mode
 601   1          TL0 = 0x30;//0x8f+0x05;//BAUD;
 602   1          TH0 = 0xff;//0xfd;//BAUD>>8;                      //initial timer0 and set reload value
 603   1              TF0 =0;
C51 COMPILER V9.51   MAIN                                                                  04/10/2020 14:00:55 PAGE 11  

 604   1          TR0 = 1;                            //tiemr0 start running
 605   1          ET0 = 1;                            //enable timer0 interrupt
 606   1          PT0 = 1;                            //improve timer0 interrupt priority
 607   1          EA = 1;                             //open global interrupt switch
 608   1      
 609   1              
 610   1          UART_INIT();
 611   1              EN = 1; 
 612   1        
 613   1              
 614   1              //gstacki = 0;
 615   1              ow_Init();delay_us(100);
 616   1              k=0;j = 0;
 617   1              //printf("chushihuawancheng!\r\n");
 618   1              while(1)
 619   1              {
 620   2                      
 621   2                      //UART_SEND(0xAA);UART_SEND(0xAA);UART_SEND(0x01);UART_SEND(0xAA);UART_SEND(0xAA);
 622   2                      //ow_Init();delay_us(1000);
 623   2      //              getreset_ok = ow_reset();delay_us(500);
 624   2      //              if(getreset_ok)
 625   2      //              {
 626   2      //              getreset_ok = 0;
 627   2      //              ow_write_byte(0xCC);
 628   2      //              delay_us(100);
 629   2      //              ow_write_byte(0x66);
 630   2      //              ow_write_byte(0x02);
 631   2      //              ow_write_byte(0x44);
 632   2      //              ow_write_byte(0x07);delay_us(100);
 633   2      //              buf[0] = ow_read_byte();
 634   2      //              buf[1] = ow_read_byte();
 635   2      //              //UART_SEND(buf[0]);UART_SEND(buf[1]);
 636   2      //              delay_us(100);
 637   2      //              ow_write_byte(0xAA);
 638   2      //              P3M1 = 0x20;
 639   2      //              P3M0 = 0x00;
 640   2      //              delay_nms(50);
 641   2      //              
 642   2      //              
 643   2      //              for(i=2;i<=39;i++)
 644   2      //                      {
 645   2      //                              buf[i] = ow_read_byte();
 646   2      //                              UART_SEND(buf[i]);
 647   2      //                              delay_us(100);
 648   2      //                      }
 649   2      //              }
 650   2      //              else ;
 651   2      //              delay_us(1000);
 652   2      //------------------------------CMD_DISABLE_DEVICE       0x33-----------------------------
 653   2                      UART_SEND(0xAA);UART_SEND(0xAA);UART_SEND(0x02);UART_SEND(0xAA);UART_SEND(0xAA);
 654   2      
 655   2                      getreset_ok = ow_reset();delay_us(500);
 656   2                      if(getreset_ok)
 657   2                      {
 658   3                              getreset_ok = 0;
 659   3                              ow_write_byte(CMD_DISABLE_DEVICE);delay_us(100);
 660   3                              for(i=0;i<=7;i++)
 661   3                              {
 662   4                                      buf[i] = ow_read_byte();
 663   4                                      //UART_SEND(buf[i]);
 664   4                                      delay_us(100);
 665   4                              }
C51 COMPILER V9.51   MAIN                                                                  04/10/2020 14:00:55 PAGE 12  

 666   3      //              k++;
 667   3      //              if(k>10)
 668   3      //                      {
 669   3      //                              k = 0;
 670   3      //                              
 671   3      //                      }
 672   3      //              else if(k==10)
 673   3      //                      {
 674   3      //                              j++;
 675   3      //                              UART_SEND(j);
 676   3                              }
 677   2                      else;
 678   2      
 679   2                      
 680   2                      delay_us(1000);
 681   2                      UART_SEND(0xAA);UART_SEND(0xAA);UART_SEND(0x01);UART_SEND(0xAA);UART_SEND(0xAA);
 682   2                      ow_write_page(0x22,0x00,PG0_data );
 683   2                      delay_us(1000);
 684   2                      ow_read_page(0x02,0x00 );
 685   2                      delay_us(1000);
 686   2                      ow_write_page(0x22,0x06,PG6_data );
 687   2                      delay_us(1000);
 688   2                      UART_SEND(0xAA);UART_SEND(0xAA);UART_SEND(0x02);UART_SEND(0xAA);UART_SEND(0xAA);
 689   2                      ow_read_page(0x02,0x07 );
 690   2                      delay_us(1000);
 691   2                      UART_SEND(0xAA);UART_SEND(0xAA);UART_SEND(0x03);UART_SEND(0xAA);UART_SEND(0xAA);
 692   2                      ow_write_crpa(0x00,0x00,hmac_secret);
 693   2                      delay_us(1000);
 694   2                      
 695   2              }
 696   1      
 697   1      } 
*** WARNING C280 IN LINE 596 OF main.c: 'ret': unreferenced local variable
*** WARNING C280 IN LINE 596 OF main.c: 'flag': unreferenced local variable
 698          
 699          
 700          
 701          
 702          
 703          
 704          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1052    ----
   CONSTANT SIZE    =    106    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     78      34
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  4 WARNING(S),  0 ERROR(S)
